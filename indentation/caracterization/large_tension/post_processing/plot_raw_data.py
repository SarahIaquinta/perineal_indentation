# -*- coding: utf-8 -*-
"""traction_large_cyclique_rebouah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0rFThpTnuSuM8pItWBElTJYO9v1qKtT

Import des bibliothèques
"""
import time
import numpy as np
import pandas as pd
from scipy.signal import lfilter, savgol_filter
import matplotlib.pyplot as plt
from indentation.experiments.zwick.post_processing.read_file import Files_Zwick
import indentation.caracterization.large_tension.post_processing.utils as large_tension_utils
from indentation.caracterization.large_tension.figures.utils import CreateFigure, Fonts, SaveFigure
from scipy import integrate
import indentation.experiments.zwick.post_processing.utils as zwick_utils

import pickle
from matplotlib.widgets import Slider, Button
import numba as nb
"""Récupération des données expérimentales"""





def read_sheet_in_datafile(datafile, sheet):
    """
    Extracts the measured time, force and displacement values in a sheet

    Parameters:
        ----------
        datafile: string
            name of the datafile to be read
        sheet: string
            name of the sheet to be read

    Returns:
        -------
        time: pandasArray
            list of the time values (in seconds) in the sheet of the datafile
        force: pandasArray
            list of the force values (in Newtons) in the sheet of the datafile
        disp: pandasArray
            list of the displacement values (in mm) in the sheet of the datafile

    """
    date = datafile[0:6]
    path_to_datafile = large_tension_utils.reach_data_path(date) / datafile
    data_in_sheet = pd.read_excel(path_to_datafile, sheet_name=sheet, header=3, names=["s", "elongation", "MPa-section60mm2", "N", "MPa" ], usecols="A:E", decimal=',')
    time = data_in_sheet.s
    elongation = data_in_sheet.elongation
    stress = data_in_sheet.MPa
    time, elongation, stress = time.to_numpy(), elongation.to_numpy(), stress.to_numpy()
    non_negative_or_null_elongations = np.where(elongation > 0.001)[0]
    rescaled_elongation = np.array([e/100 + 1 for e in elongation[non_negative_or_null_elongations]])
    rescaled_elongation = np.array([e - rescaled_elongation[0] +1 for e in rescaled_elongation])
    stress = savgol_filter(stress, 101, 2)
    rescaled_stress = np.array([s*1000 - stress[non_negative_or_null_elongations][0]*1000 for s in stress[non_negative_or_null_elongations]])
    rescaled_time = time[non_negative_or_null_elongations] - time[non_negative_or_null_elongations][0]
    return rescaled_time, rescaled_elongation, rescaled_stress

def extract_undamaged_data(datafile, sheet):
    dict_undamaged_elongation_limit = {"C1PB": 1.8, "C2PA": 2, "C3PA": 1.7}
    complete_time_list, complete_elongation_list, complete_stress_list = read_sheet_in_datafile(datafile, sheet)
    undamaged_elongation_limit_sheet = dict_undamaged_elongation_limit[sheet]
    index_max_elongation = np.where(complete_elongation_list == zwick_utils.find_nearest(complete_elongation_list, undamaged_elongation_limit_sheet))[0][0]
    undamaged_time_list, undamaged_elongation_list, undamaged_stress_list = complete_time_list[:index_max_elongation], complete_elongation_list[:index_max_elongation], complete_stress_list[:index_max_elongation]
    return undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list

def plot_undamaged_vs_total_data(datafile, sheet):
    createfigure = CreateFigure()
    fonts = Fonts()
    savefigure = SaveFigure()
    undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
    fig_stress_vs_elongation = createfigure.rectangle_figure(pixels=180)
    ax_stress_vs_elongation = fig_stress_vs_elongation.gca()
    ax_stress_vs_elongation.plot(complete_elongation_list, complete_stress_list, '-k', lw=1)
    ax_stress_vs_elongation.plot(undamaged_elongation_list, undamaged_stress_list, '-r', lw=1)
    ax_stress_vs_elongation.set_xlabel(r"$\lambda_x$ [-]", font=fonts.serif(), fontsize=26)
    ax_stress_vs_elongation.set_ylabel(r"$\sigma_x^{exp}$ [kPa]", font=fonts.serif(), fontsize=26)
    savefigure.save_as_png(fig_stress_vs_elongation, datafile[0:6] + "raw_data_stress_elong_exp_undamaged_vs_complete_" + sheet)
    
    fig_stress_vs_time = createfigure.rectangle_figure(pixels=180)
    ax_stress_vs_time = fig_stress_vs_time.gca()
    ax_stress_vs_time.plot(complete_time_list, complete_stress_list, '-k', lw=1)
    ax_stress_vs_time.plot(undamaged_time_list, undamaged_stress_list, '-r', lw=1)
    ax_stress_vs_time.set_xlabel("time [s]", font=fonts.serif(), fontsize=26)
    ax_stress_vs_time.set_ylabel(r"$\sigma_x^{exp}$ [kPa]", font=fonts.serif(), fontsize=26)
    savefigure.save_as_png(fig_stress_vs_time, datafile[0:6] + "raw_data_stress_time_exp_undamaged_vs_complete_" + sheet)
    plt.close(fig_stress_vs_elongation)
    plt.close(fig_stress_vs_time)
  
def plot_undamaged_data_vs_total_data_article(datafile):  
    sheet_list_article = ["C1PB", "C2PA", "C3PA"]
    color_dict = {"C2PA": 'b', "C1PB":'g', 'C3PA': 'm'}
    sample_id_dict = {"C1PB":"1", "C2PA":"2", "C3PA":"3"}
    createfigure = CreateFigure()
    fonts = Fonts()
    savefigure = SaveFigure()
    fig_stress_vs_elongation = createfigure.rectangle_figure(pixels=180)
    ax_stress_vs_elongation = fig_stress_vs_elongation.gca()
    fig_stress_vs_time = createfigure.rectangle_figure(pixels=180)
    ax_stress_vs_time = fig_stress_vs_time.gca()
    for sheet in sheet_list_article:
        undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
        ax_stress_vs_elongation.plot(complete_elongation_list, complete_stress_list, ':', color=color_dict[sheet], alpha=0.8, lw=1)
        ax_stress_vs_elongation.plot(undamaged_elongation_list, undamaged_stress_list, '-',  color=color_dict[sheet], lw=2, label=sample_id_dict[sheet])
        ax_stress_vs_elongation.legend(prop=fonts.serif(), loc='upper left', framealpha=0.7)

        ax_stress_vs_time.plot(complete_time_list, complete_stress_list, ':', color=color_dict[sheet], alpha=0.8, lw=1)
        ax_stress_vs_time.plot(undamaged_time_list, undamaged_stress_list, '-',  color=color_dict[sheet], lw=2, label=sample_id_dict[sheet])
        ax_stress_vs_time.legend(prop=fonts.serif(), loc='upper left', framealpha=0.7)

    ax_stress_vs_elongation.set_xlabel(r"$\lambda_x$ [-]", font=fonts.serif(), fontsize=26)
    ax_stress_vs_elongation.set_ylabel(r"$\sigma_x^{exp}$ [kPa]", font=fonts.serif(), fontsize=26)
    savefigure.save_as_svg(fig_stress_vs_elongation, datafile[0:6] + "raw_data_stress_elong_exp_undamaged_vs_complete_article")

    ax_stress_vs_time.set_xlabel("time [s]", font=fonts.serif(), fontsize=26)
    ax_stress_vs_time.set_ylabel(r"$\sigma_x^{exp}$ [kPa]", font=fonts.serif(), fontsize=26)
    savefigure.save_as_svg(fig_stress_vs_time, datafile[0:6] + "raw_data_stress_time_exp_undamaged_vs_complete_article")
    plt.close(fig_stress_vs_elongation)
    plt.close(fig_stress_vs_time)
        


  
if __name__ == "__main__":
    datafile = "231012_large_tension_data.xlsx"
    files_zwick = Files_Zwick('large_tension_data.xlsx')
    # plot_undamaged_vs_total_data(datafile, "C1PB")
    plot_undamaged_data_vs_total_data_article(datafile)




# plot_data(datafile, sheet)
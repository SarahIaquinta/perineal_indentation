# -*- coding: utf-8 -*-
"""traction_large_cyclique_rebouah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a0rFThpTnuSuM8pItWBElTJYO9v1qKtT

Import des bibliothèques
"""
import time
import numpy as np
import pandas as pd
from scipy.signal import lfilter, savgol_filter
import matplotlib.pyplot as plt
from indentation.experiments.zwick.post_processing.read_file import Files_Zwick
import indentation.caracterization.large_tension.post_processing.utils as large_tension_utils
from indentation.caracterization.large_tension.figures.utils import CreateFigure, Fonts, SaveFigure
from scipy import integrate
import indentation.caracterization.large_tension.post_processing.fit_experimental_data_continuous_parameters as fit_cont
import pickle
from matplotlib.widgets import Slider, Button
import numba as nb
"""Récupération des données expérimentales"""

import indentation.experiments.zwick.post_processing.utils as zwick_utils




def read_sheet_in_datafile(datafile, sheet):
    """
    Extracts the measured time, force and displacement values in a sheet

    Parameters:
        ----------
        datafile: string
            name of the datafile to be read
        sheet: string
            name of the sheet to be read

    Returns:
        -------
        time: pandasArray
            list of the time values (in seconds) in the sheet of the datafile
        force: pandasArray
            list of the force values (in Newtons) in the sheet of the datafile
        disp: pandasArray
            list of the displacement values (in mm) in the sheet of the datafile

    """
    date = datafile[0:6]
    path_to_datafile = large_tension_utils.reach_data_path(date) / datafile
    data_in_sheet = pd.read_excel(path_to_datafile, sheet_name=sheet, header=3, names=["s", "elongation", "MPa-section60mm2", "N", "MPa" ], usecols="A:E", decimal=',')
    time = data_in_sheet.s
    elongation = data_in_sheet.elongation
    stress = data_in_sheet.MPa
    time, elongation, stress = time.to_numpy(), elongation.to_numpy(), stress.to_numpy()
    non_negative_or_null_elongations = np.where(elongation > 0.001)[0]
    rescaled_elongation = np.array([e/100 + 1 for e in elongation[non_negative_or_null_elongations]])
    rescaled_elongation = np.array([e - rescaled_elongation[0] +1 for e in rescaled_elongation])
    stress = savgol_filter(stress, 101, 2)
    rescaled_stress = np.array([s*1000 - stress[non_negative_or_null_elongations][0]*1000 for s in stress[non_negative_or_null_elongations]])
    rescaled_time = time[non_negative_or_null_elongations] - time[non_negative_or_null_elongations][0]
    # TODO conclude on the use of  filter or not
    # n=3
    # b= [1.0 / n] * n
    # a=1
    # rescaled_elongation = savgol_filter(rescaled_elongation, 101, n)
    # time = np.array([t - time[1] for t in time])
    return rescaled_time, rescaled_elongation, rescaled_stress



def extract_undamaged_data(datafile, sheet):
    dict_undamaged_elongation_limit = {"C1PB": 1.8, "C2PA": 2, "C3PA": 1.7}
    complete_time_list, complete_elongation_list, complete_stress_list = read_sheet_in_datafile(datafile, sheet)
    undamaged_elongation_limit_sheet = dict_undamaged_elongation_limit[sheet]
    index_max_elongation = np.where(complete_elongation_list == zwick_utils.find_nearest(complete_elongation_list, undamaged_elongation_limit_sheet))[0][0]
    undamaged_time_list, undamaged_elongation_list, undamaged_stress_list = complete_time_list[:index_max_elongation], complete_elongation_list[:index_max_elongation], complete_stress_list[:index_max_elongation]
    return undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list

# rescaled_time, rescaled_elongation, rescaled_stress = read_sheet_in_datafile(datafile, sheet)

"""Observation graphique des données expérimentales"""

"""✴ Modélisation ✴

Calcul de la fonction d'évolution du chargement
"""

def compute_f_evol(eta, alpha, I1, I1_max):
  if I1_max - 3 == 0:
    f_evol=1
  else:
    f_evol = 1 - eta* ( ( (I1_max - I1 ) / (I1_max - 3) )**alpha)
  return f_evol

"""Calcul de I1"""

def compute_I1(elongation_x):
    elongation_z = 1/elongation_x
    I1 = 1 + elongation_x**2 + elongation_z**2
    return I1

"""Calcul de la partie visqueuse Q"""
def compute_Q_list(elongation_vec, beta, tau, c1, c2, c3, datafile, sheet):
  load_phase_time_dict, relaxation_phase_time_dict, discharge_phase_time_dict, load_phase_stress_dict, relaxation_phase_stress_dict, discharge_phase_stress_dict, load_phase_elongation_dict, relaxation_phase_elongation_dict, discharge_phase_elongation_dict = large_tension_utils.extract_data_per_steps(datafile, sheet)
  undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)

#   time_list, elongation_list, _ = read_sheet_in_datafile(datafile, sheet)
  dt_list = np.diff(undamaged_time_list)
  # print(len(dt_list))
  Qx_list = np.zeros_like(elongation_vec)
  I1_list = [compute_I1(elongation_x) for elongation_x in elongation_vec]
  S_H_list = [(c1 + 2*c2*(I1_list[i]-3) + 3*c3*(I1_list[i]-3)**2) * elongation_vec[i]**2 for i in range(len(I1_list))]
  for i in range(1, len(Qx_list)):
    Qx_list[i] = tau / (dt_list[i-1] + tau) * ( beta*(S_H_list[i] - S_H_list[i-1]) + Qx_list[i-1])
  return Qx_list

def compute_Q(Q_list, current_elongation, datafile, sheet):
  undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
  def find_Q_at_elongation_s(current_elongation):
    index_elongation_is_current_elongation = np.where(undamaged_elongation_list == current_elongation)[0][0]
    Q_at_elongation_s = Q_list[index_elongation_is_current_elongation]
    return Q_at_elongation_s
  return find_Q_at_elongation_s(current_elongation)




"""Calcul de la forme analytique de la contrainte"""

def compute_stress_visc(elongation_x_model, Q_x, c1, c2, c3, I1, f_evol):
  elongation_z_model = 1 / elongation_x_model
  stress = 2*f_evol * (c1 + 2*c2*(I1-3) + 3*c3*(I1-3)**2) * (elongation_x_model**2 - elongation_z_model**2) + Q_x*(elongation_x_model**2) 
  return stress

"""Calcul de la contrainte analytique pendant l'essai"""
def compute_analytical_stress(datafile, sheet, params):
  # Load experimental data
#   time_exp, elongation_exp, stress_exp = read_sheet_in_datafile(datafile, sheet)
  undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
  time_exp, elongation_exp, stress_exp = undamaged_time_list, undamaged_elongation_list, undamaged_stress_list
  # Initialisation
  stress_model_list = np.zeros_like(stress_exp)
  time_model_list = time_exp

  I1_model_list = np.zeros_like(elongation_exp)
  I1_model_list[0] = 3
  I1_max = 3

  stress_model_list[0] = 0

  [c1, c2, c3, beta, tau, eta, alpha] = params[0]
  Qx_list = compute_Q_list(elongation_exp, beta, tau, c1, c2, c3, datafile, sheet)

  for i in range(1, len(elongation_exp)):
    elongation_x_model = elongation_exp[i]
    Q = Qx_list[i]
    I1 = compute_I1(elongation_x_model)
    I1_model_list[i] = I1
    I1_max = np.max(I1_model_list)
    f_evol = compute_f_evol(eta, alpha, I1, I1_max)
    stress = compute_stress_visc(elongation_x_model, Q, c1, c2, c3, I1, f_evol)
    stress_model_list[i] = stress
  return stress_model_list

""" Comparaison modèle-exp avec un jeu de paramètres fixe"""
def plot_exp_vs_model_params_opti(datafile, sheet, params_opti, minimization_method, suffix):
  undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
  stress_model = compute_analytical_stress(datafile, sheet, params_opti)
  sample_id_dict = {"C1PB":"1", "C2PA":"2", "C3PA":"3"}
  createfigure = CreateFigure()
  fonts = Fonts()
  savefigure = SaveFigure()
  fig_stress_vs_time = createfigure.rectangle_figure(pixels=180)
  ax_stress_vs_time = fig_stress_vs_time.gca()
  
  fig_stress_vs_elongation = createfigure.rectangle_figure(pixels=180)
  ax_stress_vs_elongation = fig_stress_vs_elongation.gca()
  
  ax_stress_vs_time.plot(undamaged_time_list, undamaged_stress_list, '-k', lw=1)
  ax_stress_vs_time.plot(undamaged_time_list, stress_model, '-r', lw=1)
  ax_stress_vs_time.set_xlabel('time [s]', font=fonts.serif(), fontsize=26)
  ax_stress_vs_time.set_ylabel('stress [kPa]', font=fonts.serif(), fontsize=26)
  ax_stress_vs_time.legend(prop=fonts.serif(), loc='upper left', framealpha=0.7)

  ax_stress_vs_elongation.plot(undamaged_elongation_list, undamaged_stress_list, '-k', lw=1)
  ax_stress_vs_elongation.plot(undamaged_elongation_list, stress_model, '-r', lw=1)
  ax_stress_vs_elongation.set_xlabel('elongation [-]', font=fonts.serif(), fontsize=26)
  ax_stress_vs_elongation.set_ylabel('stress [kPa]', font=fonts.serif(), fontsize=26)
  ax_stress_vs_elongation.legend(prop=fonts.serif(), loc='upper left', framealpha=0.7)

  savefigure.save_as_png(fig_stress_vs_time, datafile[0:6] + "stress_time_exp_numRebouah_" + sheet + "_manual_" + minimization_method + "_" + suffix)
  savefigure.save_as_png(fig_stress_vs_elongation, datafile[0:6] + "stress_elongation_exp_numRebouah_" + sheet + "_manual_" + minimization_method + "_" + suffix)

  plt.close(fig_stress_vs_elongation)
  plt.close(fig_stress_vs_time)


"""Find optimal parameters"""

from sklearn.metrics import mean_squared_error
from scipy.optimize import minimize


def find_optimal_parameters(datafile, sheet, minimization_method):

  undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
  c1_init, c2_init, c3_init, beta_init, tau_init, eta_init, alpha_init = 53, 156, 40, 0.1, 1, 1, 0.5
  initial_guess_values = [c1_init, c2_init, c3_init, beta_init, tau_init, eta_init, alpha_init]
  bounds_values = [(1, 200), (1, 200), (1, 200), (0.01, 50), (1, 100), (1, 5), (0.1, 5)]
  # beta eta and alpha have to be positive
  def minimization_function(params):
      stress_list_model = compute_analytical_stress(datafile, sheet, [params])
      n = len(stress_list_model)
      stress_list_exp = undamaged_stress_list
      least_square = mean_squared_error(stress_list_exp, stress_list_model)
      return least_square

  res = minimize(minimization_function, initial_guess_values, method=minimization_method, bounds=bounds_values,
            options={'disp': False})
  params_opti = res.x
  return params_opti

"""Compare optimized to experimental stress"""

def plot_comparison_stress_model_experiment(datafile, sheet, minimization_method, suffix):
  createfigure = CreateFigure()
  fonts = Fonts()
  savefigure = SaveFigure()
  undamaged_time_list, undamaged_elongation_list, undamaged_stress_list, complete_time_list, complete_elongation_list, complete_stress_list = extract_undamaged_data(datafile, sheet)
  params_opti = find_optimal_parameters(datafile, sheet, minimization_method)
  large_tension_utils.export_optimization_params_as_pkl(datafile, sheet, params_opti, minimization_method, suffix)
  stress_list_model = compute_analytical_stress(datafile, sheet, [params_opti])
  fig_stress_vs_elongation = createfigure.rectangle_figure(pixels=180)
  ax_stress_vs_elongation = fig_stress_vs_elongation.gca()
  ax_stress_vs_elongation.plot(undamaged_elongation_list, undamaged_stress_list, '-k', lw=1, label='exp')
  ax_stress_vs_elongation.plot(undamaged_elongation_list, stress_list_model, '-r', lw=1, label='model')
  ax_stress_vs_elongation.set_xlabel(r"$\lambda_x$ [-]", font=fonts.serif(), fontsize=26)
  ax_stress_vs_elongation.set_ylabel(r"$\sigma_x^{exp}$ [kPa]", font=fonts.serif(), fontsize=26)
  ax_stress_vs_elongation.legend(prop=fonts.serif(), loc='upper left', framealpha=0.7)
  savefigure.save_as_png(fig_stress_vs_elongation, datafile[0:6] + "stress_elong_exp_numRebouah_" + sheet + "_" + minimization_method + "_" + suffix)
  
  fig_stress_vs_time = createfigure.rectangle_figure(pixels=180)
  ax_stress_vs_time = fig_stress_vs_time.gca()
  ax_stress_vs_time.plot(undamaged_time_list, undamaged_stress_list, '-k', lw=1, label='exp')
  ax_stress_vs_time.plot(undamaged_time_list, stress_list_model, '-r', lw=1, label='model')
  ax_stress_vs_time.set_xlabel("time [s]", font=fonts.serif(), fontsize=26)
  ax_stress_vs_time.set_ylabel(r"$\sigma_x^{exp}$ [kPa]", font=fonts.serif(), fontsize=26)
  ax_stress_vs_time.legend(prop=fonts.serif(), loc='upper left', framealpha=0.7)
  savefigure.save_as_png(fig_stress_vs_time, datafile[0:6] + "stress_time_exp_numRebouah_" + sheet + "_" + minimization_method+ "_" + suffix)
  plt.close(fig_stress_vs_elongation)
  plt.close(fig_stress_vs_time)
  




  
if __name__ == "__main__":
  datafile = "231012_large_tension_data.xlsx"
  files_zwick = Files_Zwick('large_tension_data.xlsx')


  start_time = time.time()
  datafile_as_pds, sheets_list_with_data = files_zwick.get_sheets_from_datafile(datafile)

  minimization_method_list = ['Powell']# ['Nelder-Mead', 'Powell', 'CG', 'BFGS', 'L-BFGS-B', 'TNC', 'COBYLA', 'SLSQP', 'trust-constr', 'dogleg', 'trust-ncg', 'trust-exact', 'trust-krylov']
  suffix = "undamaged_tau_cst"
  sheet_list_article = ["C2PA", "C3PA", "C1PB"]
#   for minimization_method in minimization_method_list:
#     for sheet in sheet_list_article:
#         print('started', minimization_method, sheet)
#         plot_comparison_stress_model_experiment(datafile, sheet, minimization_method, suffix)
#         print('done succeed', minimization_method, sheet)
#         print("--- %s seconds ---" % (time.time() - start_time))

  for minimization_method in minimization_method_list:
    for sheet in sheet_list_article:
        params = large_tension_utils.extract_optimization_params_from_pkl(datafile, sheet, 'Powell', suffix)
        print(sheet)
        print ('c1, c2, c3, beta, tau, eta, alpha')
        print(params)
        plot_exp_vs_model_params_opti(datafile, sheet, [params], 'Powell', suffix)


      



